
[2025-08-17 07:54:16]
âœ… requests already installed.
----------------------------------------

[2025-08-17 07:54:16]
ðŸ“¦ Installing beautifulsoup4 ...
----------------------------------------

[2025-08-17 07:54:17]
ðŸ“œ Executing Code:
import requests
from bs4 import BeautifulSoup

url = "https://en.wikipedia.org/wiki/List_of_highest-grossing_films"
response = requests.get(url)
soup = BeautifulSoup(response.text, "html.parser")

table = soup.find("table", {"class": "wikitable"})
headers = [header.text.strip() for header in table.find_all("th")]

summary = f"Found a table with headers: {', '.join(headers)}. The table contains the rank, title, worldwide gross, year, and peak rank for highest-grossing films."

with open("uploads/788b0e63-55f7-4fd4-b9f4-e65261793748/metadata.txt", "a") as f:
    f.write(summary + "\n")

print("Summary of the data source has been saved to metadata.txt")

----------------------------------------

[2025-08-17 07:54:19]
âœ… Code executed successfully:
Summary of the data source has been saved to metadata.txt

----------------------------------------

[2025-08-17 07:54:47]
âœ… pandas already installed.
----------------------------------------

[2025-08-17 07:54:47]
âœ… numpy already installed.
----------------------------------------

[2025-08-17 07:54:47]
âœ… matplotlib already installed.
----------------------------------------

[2025-08-17 07:54:47]
âœ… seaborn already installed.
----------------------------------------

[2025-08-17 07:54:47]
ðŸ“œ Executing Code:
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import io
import base64
import json
import re

# Step 1: Fetch and parse the data
url = "https://en.wikipedia.org/wiki/List_of_highest-grossing_films"
tables = pd.read_html(url)
df = tables[0]

# Step 2: Clean the data
# Select and rename columns for clarity
df = df.iloc[:, :5]
df.columns = ["Rank", "Peak", "Title", "Worldwide_gross", "Year"]


# Clean 'Worldwide_gross' column
def clean_gross(gross):
    gross = str(gross)
    # Remove citation brackets like [1] or [a]
    gross = re.sub(r"\[.*\]", "", gross)
    # Remove currency symbols and commas
    gross = re.sub(r"[^\d]", "", gross)
    return int(gross)


df["Worldwide_gross"] = (
    df["Worldwide_gross"]
    .apply(lambda x: re.sub(r"[^0-9]", "", str(x)))
    .astype(np.int64)
)

# Convert columns to numeric, coercing errors to NaN
for col in ["Rank", "Peak", "Year"]:
    df[col] = pd.to_numeric(df[col], errors="coerce")

# Drop rows where essential numeric data is missing
df.dropna(subset=["Rank", "Peak", "Year", "Worldwide_gross"], inplace=True)

# Convert columns to integer types
for col in ["Rank", "Peak", "Year"]:
    df[col] = df[col].astype(int)

# Step 3: Answer the questions
# 1. How many $2 bn movies were released before 2000?
movies_2bn_before_2000 = df[
    (df["Worldwide_gross"] >= 2_000_000_000) & (df["Year"] < 2000)
]
answer1 = len(movies_2bn_before_2000)

# 2. Which is the earliest film that grossed over $1.5 bn?
movies_1_5bn = df[df["Worldwide_gross"] >= 1_500_000_000]
earliest_movie = movies_1_5bn.loc[movies_1_5bn["Year"].idxmin()]
answer2 = earliest_movie["Title"]

# 3. What's the correlation between the Rank and Peak?
correlation = df["Rank"].corr(df["Peak"])
answer3 = correlation

# 4. Draw a scatterplot of Rank and Peak
plt.figure(figsize=(8, 6))
sns.regplot(
    x="Rank",
    y="Peak",
    data=df,
    scatter_kws={"alpha": 0.6},
    line_kws={"color": "red", "linestyle": "--"},
)
plt.title("Rank vs. Peak of Highest-Grossing Films")
plt.xlabel("Rank")
plt.ylabel("Peak")
plt.grid(True)

# Save plot to a memory buffer and encode in base64
buf = io.BytesIO()
plt.savefig(buf, format="png", bbox_inches="tight")
buf.seek(0)
img_base64 = base64.b64encode(buf.getvalue()).decode("utf-8")
buf.close()
plt.close()
answer4 = f"data:image/png;base64,{img_base64}"

# Step 4: Save the final answers to a JSON file
final_answers = [answer1, answer2, answer3, answer4]

with open("uploads/788b0e63-55f7-4fd4-b9f4-e65261793748/result.json", "w") as f:
    json.dump(final_answers, f)

# Append detailed answers to metadata for context
metadata_summary = f"""Question 1: {answer1} movies grossing over $2bn were released before 2000.\nQuestion 2: The earliest film to gross over $1.5bn is '{answer2}'.\nQuestion 3: The correlation between Rank and Peak is {answer3:.4f}.\nQuestion 4: Scatter plot generated and encoded in base64.\n"""
with open("uploads/788b0e63-55f7-4fd4-b9f4-e65261793748/metadata.txt", "a") as f:
    f.write(metadata_summary)

print("Analysis complete. Results saved to result.json and metadata.txt")

----------------------------------------

[2025-08-17 07:54:51]
âœ… Code executed successfully:
Analysis complete. Results saved to result.json and metadata.txt

----------------------------------------

[2025-08-17 07:55:02]
ðŸ“œ Executing Code:

----------------------------------------

[2025-08-17 07:55:02]
âœ… Code executed successfully:

----------------------------------------
